//
//  CheckoutPresenter.swift
//  smartPOS
//
//  Created by I Am Focused on 18/04/2021.
//  Copyright (c) 2021 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CheckoutPresentationLogic {
    func presentFetchedMenuItemGroups(response: Checkout.FetchMenuItems.Response)
    func presentFetchedMenuItemToppings(response: Checkout.FetchMenuItemToppings.Response)
    func presentCreatedOrderItem(response: Checkout.CreateOrderItem.Response)
    func presentManipulateddOrderItem(response: Checkout.ManipulateOrderItemQuantity.Response)
    func presentCreateOrderAndOrderItem(response: Checkout.CreateOrderAndOrderItems.Response)
    func presentRemovedOrder(response: Checkout.RemoveOrder.Response)
    func presentUpdatedOrder(response: Checkout.UpdateOrder.Response)
}

class CheckoutPresenter: CheckoutPresentationLogic {
    weak var viewController: CheckoutDisplayLogic?

    // MARK: Do something

    func presentFetchedMenuItemGroups(response: Checkout.FetchMenuItems.Response) {
        var displayedMenuItemGroups: [Checkout.DisplayedMenuItemGroup] = []
        var allMenuItem = Checkout.DisplayedMenuItemGroup(id: "0", name: "Tất cả", index: 0, menuItems: [])
        for menuItemGroup in response.menuGroups ?? [] {
            let menuItems = menuItemGroup.menuItems
            allMenuItem.menuItems.append(contentsOf: menuItems)
            let displayedMenuItemGroup = Checkout.DisplayedMenuItemGroup(id: menuItemGroup.id, name: menuItemGroup.name, menuItems: menuItems)
            displayedMenuItemGroups.append(displayedMenuItemGroup)
        }
        displayedMenuItemGroups.insert(allMenuItem, at: 0)

        let viewModel = Checkout.FetchMenuItems.ViewModel(displayedMenuItemGroups: displayedMenuItemGroups)
        viewController?.displayFetchedMenuItemGroups(viewModel: viewModel)
    }

    func presentManipulateddOrderItem(response: Checkout.ManipulateOrderItemQuantity.Response) {
        let separatedNestedOrder = CheckoutPresenter.separateOrderAndOrderItem(nestedOrder: response.order)
        let viewModel = Checkout.ManipulateOrderItemQuantity.ViewModel(order: separatedNestedOrder.order, orderItems: separatedNestedOrder.orderItems, error: response.error)
        viewController?.displayManupulatedOrderItem(viewModel: viewModel)
    }

    func presentRemovedOrder(response: Checkout.RemoveOrder.Response) {
        let separatedNestedOrder = CheckoutPresenter.separateOrderAndOrderItem(nestedOrder: response.order)
        let viewModel = Checkout.ManipulateOrderItemQuantity.ViewModel(order: separatedNestedOrder.order, orderItems: separatedNestedOrder.orderItems, error: response.error)
        viewController?.displayManupulatedOrderItem(viewModel: viewModel)
    }

    func presentUpdatedOrder(response: Checkout.UpdateOrder.Response) {
        let separatedNestedOrder = CheckoutPresenter.separateOrderAndOrderItem(nestedOrder: response.order)
        let viewModel = Checkout.UpdateOrder.ViewModel(order: separatedNestedOrder.order, orderItems: separatedNestedOrder.orderItems, error: response.error)
        viewController?.displayUpdatedOrder(viewModel: viewModel)
    }

    func presentCreatedOrderItem(response: Checkout.CreateOrderItem.Response) {
        let separatedNestedOrder = CheckoutPresenter.separateOrderAndOrderItem(nestedOrder: response.order)
        let viewModel = Checkout.CreateOrderItem.ViewModel(order: separatedNestedOrder.order, orderItems: separatedNestedOrder.orderItems, error: response.error)
        viewController?.displayCreatedOrderItem(viewModel: viewModel)
    }

    func presentCreateOrderAndOrderItem(response: Checkout.CreateOrderAndOrderItems.Response) {
        let separatedNestedOrder = CheckoutPresenter.separateOrderAndOrderItem(nestedOrder: response.order)
        let viewModel = Checkout.CreateOrderAndOrderItems.ViewModel(order: separatedNestedOrder.order, orderItems: separatedNestedOrder.orderItems, error: response.error)
        viewController?.displayCreatedOrderAndOrderItems(viewModel: viewModel)
    }

    func presentFetchedMenuItemToppings(response: Checkout.FetchMenuItemToppings.Response) {
        debugPrint("presentFetchedMenuItemToppings")
        debugPrint(response)
        let viewModel = Checkout.FetchMenuItemToppings.ViewModel(toppingGroups: response.toppingGroups)
        viewController?.displayFetchedMenuItemToppings(viewModel: viewModel)
    }
}

// MARK: - Helper function

extension CheckoutPresenter {
    public static func separateOrderAndOrderItem(nestedOrder: NestedOrder?) -> SeparatedNestedOrder {
        let order = Order(id: nestedOrder?.id, cashierId: nestedOrder?.cashierId, restaurantId: nestedOrder?.restaurantId ?? "", subTotal: nestedOrder?.subTotal, itemDiscount: nestedOrder?.itemDiscount, serviceFee: nestedOrder?.serviceFee, discount: nestedOrder?.discount, grandTotal: nestedOrder?.grandTotal ?? 0, paymentType: nestedOrder?.paymentType, status: nestedOrder?.status, createdAt: nestedOrder?.createdAt, updatedAt: nestedOrder?.updatedAt)

        var orderItems: [OrderItem] = []
        for item in nestedOrder?.orderItems ?? [] {
            let orderItem = OrderItem(id: item.id, menuItemId: item.menuItemId, name: item.name, orderId: nestedOrder?.id, price: item.price, discount: item.discount, quantity: item.quantity, note: "")
            orderItems.append(orderItem)
        }
        return SeparatedNestedOrder(order: order, orderItems: orderItems)
    }
}

struct SeparatedNestedOrder {
    let order: Order?
    let orderItems: [OrderItem]?
}
