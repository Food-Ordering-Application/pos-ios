//
//  OrderDetailPresenter.swift
//  smartPOS
//
//  Created by I Am Focused on 18/04/2021.
//  Copyright (c) 2021 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OrderDetailPresentationLogic {
    func presentOrder(response: OrderDetail.GetOrder.Response)
    func presentConfirmedOrder(response: OrderDetail.ConfirmOrder.Response)
    func presentRejectedOrder(response: OrderDetail.RejectOrder.Response)
    func presentCompletedOrder(response: OrderDetail.CompleteOrder.Response)
}

class OrderDetailPresenter: OrderDetailPresentationLogic {
    weak var viewController: OrderDetailDisplayLogic?

    // MARK: Do present Order maybe some needed attr

    func presentOrder(response: OrderDetail.GetOrder.Response) {
//    let date = (launch.launchDateUTC).fromUTCToLocalDateTime()
//    let title = launch.missionName
//    var status = FlightStatus.upcoming
//    if let flightStatus = launch.launchSuccess {
//        status = flightStatus ? .success : .failure
//    }
//    let description = launch.details ?? ""
//    let flightNumber = "Flight Number #\(launch.flightNumber)"
//    let videoUrl = launch.links.youTubeVideoId
//    let imgUrl = launch.links.flickrImages
//    let displayedLaunch = SingleLaunchPage.GetLaunch.ViewModel.DisplayedLaunch(title: title, date: date, flightNumber: flightNumber, description: description, status: status, videoUrl: videoUrl, imgUrls: imgUrl)
//
//    let viewModel = SingleLaunchPage.GetLaunch.ViewModel(displayedLaunch: displayedLaunch)
//    viewController?.displayLaunch(viewModel: viewModel)
//

        let separatedNestedOrder = CheckoutPresenter.separateOrderAndOrderItem(nestedOrder: response.order)
        let viewModel = OrderDetail.GetOrder.ViewModel(order: separatedNestedOrder.order, orderItems: separatedNestedOrder.orderItems, error: response.error)
        viewController?.displayOrder(viewModel: viewModel)
    }

    func presentConfirmedOrder(response: OrderDetail.ConfirmOrder.Response) {
        let viewModel = OrderDetail.ConfirmOrder.ViewModel(error: response.error)
        viewController?.displayConfirmedOrder(viewModel: viewModel)
    }
    func presentRejectedOrder(response: OrderDetail.RejectOrder.Response) {
        let viewModel = OrderDetail.RejectOrder.ViewModel(error: response.error)
        viewController?.displayRejectedOrder(viewModel: viewModel)
    }
    func presentCompletedOrder(response: OrderDetail.CompleteOrder.Response) {
        let viewModel = OrderDetail.CompleteOrder.ViewModel(error: response.error)
        viewController?.displayCompletedOrder(viewModel: viewModel)
    }
}
