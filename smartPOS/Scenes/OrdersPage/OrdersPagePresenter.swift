//
//  OrdersPagePresenter.swift
//  smartPOS
//
//  Created by I Am Focused on 17/04/2021.
//  Copyright (c) 2021 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OrdersPagePresentationLogic {
    func presentOrders(response: OrdersPage.FetchOrders.Response)
    func presentSearchedOrders(response: OrdersPage.SearchOrders.Response)
    func presentSearchedOrdersByStatus(response: OrdersPage.FetchOrdersByStatus.Response)
    func presentRefreshedOrders(response: OrdersPage.RefreshOrders.Response)
}

final class OrdersPagePresenter: OrdersPagePresentationLogic {
    weak var viewController: OrdersPageDisplayLogic?
    
    // MARK: Set orders to be display after view did load
    
    func presentOrders(response: OrdersPage.FetchOrders.Response) {
//        let displayedOrders = getDisplayedOrders(response.orders)
        let viewModel = OrdersPage.FetchOrders.ViewModel(displayedOrders: response.orders ?? [], error: response.error)
        viewController?.displayOrders(viewModel: viewModel)
    }
    
    // MARK: Set orders to be display after a search is made

    func presentSearchedOrders(response: OrdersPage.SearchOrders.Response) {
        let displayedOrders = getDisplayedOrders(response.orders)
        let viewModel = OrdersPage.SearchOrders.ViewModel(displayedOrders: displayedOrders)
        viewController?.displaySearchOrders(viewModel: viewModel)
    }
    
    // MARK: Set orders to be display selection of orders type

    func presentSearchedOrdersByStatus(response: OrdersPage.FetchOrdersByStatus.Response) {
        let displayedOrders = getDisplayedOrders(response.orders)
        let viewModel = OrdersPage.FetchOrdersByStatus.ViewModel(displayedOrders: displayedOrders)
        viewController?.displayOrdersByStatus(viewModel: viewModel)
    }
    
    // MARK: Set orders to be display after a refresh is called on data

    func presentRefreshedOrders(response: OrdersPage.RefreshOrders.Response) {
//        let displayedOrders = getDisplayedOrders(response.orders)
        let viewModel = OrdersPage.RefreshOrders.ViewModel(displayedOrders: response.orders ?? [], error: response.error)
        viewController?.displayRefreshedOrders(viewModel: viewModel)
    }
}

extension OrdersPagePresenter {
    /// Creates a array of DisplayedLaunch to display
    ///
    /// - Parameter ordersToDisplay: An array of Launch
    /// - Returns: An array of OrdersPage.DisplayedLaunch to display in view
    private func getDisplayedOrders(_ ordersToDisplay: [Order]?) -> [OrdersPage.DisplayedOrder] {
        var displayedOrders: [OrdersPage.DisplayedOrder] = []
        
        if let orders = ordersToDisplay {
            for order in orders {
                let id = order.id!
                let displayedlaunch = OrdersPage.DisplayedOrder(id: id, name: "namedOrder", date: "datedOdrer", imgUrl: "pizza")
                displayedOrders.append(displayedlaunch)
            }
        }
        
        return displayedOrders
    }
}
